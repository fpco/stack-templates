{-# START_FILE package.yaml #-}
{{=<% %>=}}
name:                <%name%>
version:             0.1.0.0
#synopsis:
#description:
homepage:            https://github.com/<%github-username%><%^github-username%>githubuser<%/github-username%>/<%name%>#readme
license:             BSD3
author:              <%author-name%><%^author-name%>Author name here<%/author-name%>
maintainer:          <%author-email%><%^author-email%>example@example.com<%/author-email%>
copyright:           <%copyright%><%^copyright%><%year%><%^year%>2018<%/year%> <%author-name%><%^author-name%>Author name here<%/author-name%><%/copyright%>
category:            <%category%><%^category%>Web<%/category%>
extra-source-files:
- README.md

dependencies:
  - base >= 4.7 && < 5
  - warp
  - wai
  - http-types

executables:
  <%name%>:
    source-dirs:      src
    main:             Main.hs

{-# START_FILE Setup.hs #-}
{{=<% %>=}}
import Distribution.Simple
main = defaultMain

{-# START_FILE src/Main.hs #-}
{{=<% %>=}}
{-# LANGUAGE OverloadedStrings #-}

module Main where

import Network.Wai (responseLBS, Application)
import Network.Wai.Handler.Warp (run)
import Network.HTTP.Types (status200)
import Network.HTTP.Types.Header (hContentType)

main = do
    let port = 3000
    putStrLn $ "Listening on port " ++ show port
    run port app

app :: Application
app req f =
    f $ responseLBS status200 [(hContentType, "text/plain")] "Hello from simple K8S example!"

{-# START_FILE README.md #-}
{{=<% %>=}}
# <%name%>

{-# START_FILE LICENSE #-}
{{=<% %>=}}
Copyright <%author-name%><%^author-name%>Author name here<%/author-name%> (c) <%year%><%^year%>2018<%/year%>

All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.

    * Redistributions in binary form must reproduce the above
      copyright notice, this list of conditions and the following
      disclaimer in the documentation and/or other materials provided
      with the distribution.

    * Neither the name of <%author-name%><%^author-name%>Author name here<%/author-name%> nor the names of other
      contributors may be used to endorse or promote products derived
      from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
{-# START_FILE .gitignore #-}
{{=<% %>=}}
.stack-work
build/*

{-# START_FILE .dockerignore #-}
{{=<% %>=}}
.stack-work
Dockerfile
chart

{-# START_FILE entrypoint.sh #-}
{{=<% %>=}}
#!/bin/bash

# Add local user
# Either use the LOCAL_USER_ID if passed in at runtime or
# fallback to 9001
USER_ID=${LOCAL_USER_ID:-9001}
APP_DIR=${APP_DIR:-/opt/app}

echo "Starting with UID : $USER_ID"
useradd --shell /bin/bash -u $USER_ID -o -c "" -m user
export HOME=/home/user

# set correct permissions on APP_DIR and subfolders
chown -R user. $APP_DIR

exec /sbin/pid1 -u user -g user "$@"

{-# START_FILE Dockerfile #-}
{{=<% %>=}}
FROM fpco/pid1:0.1.2.0

ENV DEBIAN_FRONTEND=noninteractive

RUN apt-get update && apt-get install -y \
    ca-certificates \
    zlib1g-dev \
    libgmp-dev \
    netbase

RUN mkdir -p /opt/app

COPY entrypoint.sh /usr/local/bin/entrypoint.sh
RUN chmod +x /usr/local/bin/entrypoint.sh
ENTRYPOINT ["/usr/local/bin/entrypoint.sh"]

COPY build/<%name%> /opt/app/<%name%>

WORKDIR /opt/app

CMD ["/opt/app/<%name%>"]

{-# START_FILE Makefile #-}
{{=<% %>=}}
.PHONY: help build build-docker-image deploy run push

DEFAULT_GOAL: help

PROJECT_NAME ?= <%name%>

require-%:
	@ if [ "${${*}}" = "" ]; then \
		echo "ERROR: Environment variable not set: \"$*\""; \
		exit 1; \
	fi

## Build project
build:
	@mkdir -p build
	@stack build --copy-bins --local-bin-path=build

## Run docker image
run: require-CI_REGISTRY_IMAGE require-CI_PIPELINE_ID
	@docker run -it -p 3000:3000 "${CI_REGISTRY_IMAGE}:pipeline-${CI_PIPELINE_ID}"

## Push docker image
push: require-CI_REGISTRY_IMAGE require-CI_PIPELINE_ID
	@docker push "${CI_REGISTRY_IMAGE}:pipeline-${CI_PIPELINE_ID}"

## Build docker image. Used in CI/CD
build-docker-image: require-CI_REGISTRY_IMAGE require-CI_PIPELINE_ID
	@docker build -t "${CI_REGISTRY_IMAGE}:pipeline-${CI_PIPELINE_ID}" .

## Deploy using helm
deploy: require-CI_ENVIRONMENT_NAME require-CI_PIPELINE_ID
	@echo "Deploying build pipeline: ${CI_PIPELINE_ID}"
	@helm upgrade \
		--install ${PROJECT_NAME} chart \
		-f chart/values/${CI_ENVIRONMENT_NAME}.yaml \
		--set image.tag="pipeline-${CI_PIPELINE_ID}"

## Show help screen.
help:
	@echo "Please use \`make <target>' where <target> is one of\n\n"
	@awk '/^[a-zA-Z\-\_0-9]+:/ { \
		helpMessage = match(lastLine, /^## (.*)/); \
		if (helpMessage) { \
			helpCommand = substr($$1, 0, index($$1, ":")-1); \
			helpMessage = substr(lastLine, RSTART + 3, RLENGTH); \
			printf "%-30s %s\n", helpCommand, helpMessage; \
		} \
	} \
	{ lastLine = $$0 }' $(MAKEFILE_LIST)

{-# START_FILE .gitlab-ci.yml #-}
{{=<% %>=}}
image: registry.gitlab.fpcomplete.com/fpco/default-build-image:5354

variables:
  KUBECONFIG: /etc/deploy/kubeconfig.yaml
  CACHE_S3_VERSION: "v0.1.4"
  BASE_BRANCH: "master"
  OS_NAME: "linux"
  CACHE_S3_PREFIX: "<%name%>"

stages:
  - build
  - deploy

build:
  stage: build
  script:
    - export LANG=en_US.UTF-8
    - curl -f -L "https://github.com/fpco/cache-s3/releases/download/${CACHE_S3_VERSION}/cache-s3-${CACHE_S3_VERSION}-${OS_NAME}-x86_64.tar.gz" | tar xz -C /usr/local/bin 'cache-s3';
      if [ -x $(readlink -f "/usr/local/bin/cache-s3") ]; then
        cache-s3 --prefix="${CACHE_S3_PREFIX}"
                 --git-branch="${CI_BUILD_REF_NAME}"
                 --suffix="${OS_NAME}"
                 restore stack --base-branch="${BASE_BRANCH}";
        cache-s3 --prefix="${CACHE_S3_PREFIX}"
                 --git-branch="${CI_BUILD_REF_NAME}"
                 --suffix="${OS_NAME}"
                 restore stack work --base-branch="${BASE_BRANCH}";
      fi
    - make build
    - make build-docker-image
    - docker login -u gitlab-ci-token -p "${CI_BUILD_TOKEN}" "${CI_REGISTRY}"
    - make push
    - if [ "${CI_BUILD_REF_NAME}" = "${BASE_BRANCH}" ]; then
        cache-s3 --prefix="${CACHE_S3_PREFIX}"
                 --git-branch="${CI_BUILD_REF_NAME}"
                 --suffix="${OS_NAME}"
                 save stack;
      fi;
      cache-s3 --prefix="${CACHE_S3_PREFIX}"
               --git-branch="${CI_BUILD_REF_NAME}"
               --suffix="${OS_NAME}"
               save stack work

deploy_staging:
  stage: deploy
  script:
    - mkdir -p /etc/deploy
    - echo "${KUBECONFIG_YAML}" > /etc/deploy/kubeconfig.enc
    - base64 -d </etc/deploy/kubeconfig.enc > ${KUBECONFIG}
    - make deploy
  environment:
    name: staging
    url: https://<%name%>.fpcomplete.com
  when: manual
  # only:
  # - develop

{-# START_FILE chart/Chart.yaml #-}
{{=<% %>=}}
apiVersion: v1
description: A Helm chart for Kubernetes
name: <%name%>
version: 0.1.0

{-# START_FILE chart/values.yaml #-}
{{=<% %>=}}
# Default values for chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1
image:
  repository: registry.gitlab.fpcomplete.com/fpco/<%name%>
  tag: latest
  pullPolicy: IfNotPresent
service:
  name: <%name%>
  type: ClusterIP
  externalPort: 80
  internalPort: 3000
ingress:
  enabled: true
  # Used to create an Ingress record.
  hosts:
    - <%name%>.fpcomplete.com
  annotations:
    kubernetes.io/ingress.class: nginx
    kubernetes.io/tls-acme: "true"
  tls:
    # Secrets must be manually created in the namespace.
    - secretName: <%name%>-tls
      hosts:
        - <%name%>.fpcomplete.com
registry:
  private: false
  secretName: registry-key
resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

{-# START_FILE chart/templates/deployment.yaml #-}
{{=<% %>=}}
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: {{ template "chart.fullname" . }}
  labels:
    app: {{ template "chart.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  template:
    metadata:
      labels:
        app: {{ template "chart.name" . }}
        release: {{ .Release.Name }}
    spec:
{{- if .Values.registry.private }}
      imagePullSecrets:
        - name: {{ .Values.registry.secretName }}
{{- end }}
      containers:
        - name: {{ .Chart.Name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - containerPort: {{ .Values.service.internalPort }}
          livenessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.internalPort }}
          readinessProbe:
            httpGet:
              path: /
              port: {{ .Values.service.internalPort }}
          resources:
{{ toYaml .Values.resources | indent 12 }}
    {{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
    {{- end }}

{-# START_FILE chart/templates/ingress.yaml #-}
{{=<% %>=}}
{{- if .Values.ingress.enabled -}}
{{- $serviceName := include "chart.fullname" . -}}
{{- $servicePort := .Values.service.externalPort -}}
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ template "chart.fullname" . }}
  labels:
    app: {{ template "chart.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
  annotations:
    {{- range $key, $value := .Values.ingress.annotations }}
      {{ $key }}: {{ $value | quote }}
    {{- end }}
spec:
  rules:
    {{- range $host := .Values.ingress.hosts }}
    - host: {{ $host }}
      http:
        paths:
          - path: /
            backend:
              serviceName: {{ $serviceName }}
              servicePort: {{ $servicePort }}
    {{- end -}}
  {{- if .Values.ingress.tls }}
  tls:
{{ toYaml .Values.ingress.tls | indent 4 }}
  {{- end -}}
{{- end -}}

{-# START_FILE chart/templates/service.yaml #-}
{{=<% %>=}}
apiVersion: v1
kind: Service
metadata:
  name: {{ template "chart.fullname" . }}
  labels:
    app: {{ template "chart.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  type: {{ .Values.service.type }}
  ports:
    - port: {{ .Values.service.externalPort }}
      targetPort: {{ .Values.service.internalPort }}
      protocol: TCP
      name: {{ .Values.service.name }}
  selector:
    app: {{ template "chart.name" . }}
    release: {{ .Release.Name }}


{-# START_FILE chart/templates/_helpers.tpl #-}
{{=<% %>=}}
{{/* vim: set filetype=mustache: */}}
{{/*
Expand the name of the chart.
*/}}
{{- define "chart.name" -}}
{{- default .Chart.Name .Values.nameOverride | trunc 63 | trimSuffix "-" -}}
{{- end -}}

{{/*
Create a default fully qualified app name.
We truncate at 63 chars because some Kubernetes name fields are limited to this (by the DNS naming spec).
*/}}
{{- define "chart.fullname" -}}
{{- $name := default .Chart.Name .Values.nameOverride -}}
{{- printf "%s-%s" .Release.Name $name | trunc 63 | trimSuffix "-" -}}
{{- end -}}
